
	
  <style>
    .g-height-50 {
        height: 50px;
    }

    .g-width-50 {
        width: 50px !important;
    }

    @media (min-width: 0) {
        .g-pa-30 {
            padding: 2.14286rem !important;
        }
    }

    .g-bg-secondary {
        background-color: #fafafa !important;
    }

    .u-shadow-v18 {
        box-shadow: 0 5px 10px -6px rgba(0, 0, 0, 0.15);
    }

    .g-color-gray-dark-v4 {
        color: #777 !important;
    }

    .g-font-size-12 {
        font-size: 0.85714rem !important;
    }

    .media-comment {
        margin-top: 20px
    }

    .singleImageCanvasContainer {
        overflow: hidden;
        height: 200px;
        width: 30%;
        display: inline-block;
        position: relative;
        padding-right: 0px;
        margin-right: 15px;
        border: 2px solid #dfdfdf;
        margin-bottom: 10px;
        padding: 4px;
        border-radius: .25rem;
    }

    .singleImageCanvasContainer .singleImageCanvasCloseBtn {
        position: absolute;
        right: 0;
    }

    .singleImageCanvasContainer .singleImageCanvas {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
</style>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js"></script>

<main id="main" class="main">
    <div class="container tm-mt-big tm-mb-big">
      <div class="row" style="width: 1400px;">
        <div class="col-xl-9 col-lg-10 col-md-12 col-sm-12 mx-auto">
          <div class="tm-bg-primary-dark tm-block tm-block-h-auto">
            <div class="row">
              <div class="col-12">
                <h2 class="tm-block-title d-inline-block">Add Product</h2>
              </div>
            </div>
            <div class="row tm-edit-product-row">
              <div class="col-xl-6 col-lg-6 col-md-12">
                <form action="/admin/productview" class="tm-edit-product-form" method="post" onsubmit="return validation()" enctype="multipart/form-data" >
                  <div class="form-group mb-3">
                    <label for="name">Product Name</label>
                    <input id="Name" name="ProductName" type="text" class="form-control validate" onkeyup="validateProductName()" />
                    <span id="name" class="text-danger"></span>
                  </div>

                 

                  <div class="form-group mb-3">
                    <label for="name" >Price  </label>
                      <input id="price"  name="ProductPrice"  type="text"  class="form-control validate"    onkeyup="validPrice()"/>
                      <span id="Price" class="text-danger"></span>
                  </div>

                  <div class="form-group mb-3">
                    <labelfor="name" >Offers </label>
                     <input id="offers" name="Offers" type="text" class="form-control validate" onkeyup="validOffers()" />
                     <span id="Offers" class="text-danger"></span>
                  </div>


                  <div class="form-group mb-3">
                    <label for="description" >Description</label>
                    <textarea class="form-control validate" rows="3" name="Discription" id="Discription"   onkeyup="validateProductDescription()"></textarea>
                    <span id="productdescription" class="text-danger"></span>
                  </div>

                    <div class="form-group mb-3">
                    <label for="description">Specifications</label >
                    <textarea class="form-control validate" rows="3" name="Specs"  id="specs" onkeyup="validateSpecs()"></textarea>
                    <span id="Specifications" class="text-danger"></span>
                    
                  </div>

                  <div class="form-group mb-3">
                    <label for="category" >Brand</label >
                      <select name="brand" id="brand" class="form-select" >
                        {{#each category}}
                        <option value="{{this._id}}">{{this.brandname}}</option>
                        {{/each}}
                       
                      </select>
                       <span id="Brand" class="text-danger"></span>
                     
                  </div>

                  <div class="form-group mb-3 col-xs-12 col-sm-6">
                    <label for="category" >Color</label >
                    
                    <input  class="form-control validate" type="text" id="color" name="color" onkeyup="validColor()">
                    <span id="Color" class="text-danger"></span>

          
                  </div>

                  <div class="row">
                     
                        <div class="form-group mb-3 col-xs-12 col-sm-6">
                          <label for="stock" >Stock </label>
                          <input id="stock" name="stock" type="text" class="form-control validate"   onkeyup="validStock()"/>
                          <span id="Stock" class="text-danger"></span>
                        </div>
                  </div>
                  
                  <div class="form-outline mb-4">
                
                <label class="form-label" for="id_image">Image</label>
                <input type="file" class="form-control" style="width: 500px;" id="id_image" name="image" accept="image/*" multiple>
            </div>
              </div>

            
               <div class="container m-5">
               

                <div class="form-group" style="display:grid;">
                    <div id="image-box0" class="image-container" style="height: 500px; width: 500px;">
                    </div>
                    <button class="btn btn-outline-info" id="crop-btn0" style="width: 100px; margin-top: 10px; display: none;" type="button">Crop</button> <button hidden class="btn btn-outline-info" id="confirm-btn" style="width: 100%; margin-top: 10px;" type="submit">Post</button>
                
                    <div id="image-box1" class="image-container" style="height: 500px; width: 500px;">
                    </div>
                    <button class="btn btn-outline-info" id="crop-btn1" style="width: 100px; margin-top: 10px; display: none;" type="button">Crop</button> <button hidden class="btn btn-outline-info" id="confirm-btn" style="width: 100%; margin-top: 10px;" type="submit">Post</button>
               
                    <div id="image-box2" class="image-container" style="height: 500px; width: 500px;">
                    </div>
                    <button class="btn btn-outline-info" id="crop-btn2" style="width: 100px; margin-top: 10px; display: none;" type="button">Crop</button> <button hidden class="btn btn-outline-info" id="confirm-btn" style="width: 100%; margin-top: 10px;" type="submit">Post</button>
               
                    <div id="image-box3" class="image-container" style="height: 500px; width: 500px;">
                    </div>
                    <button class="btn btn-outline-info" id="crop-btn3" style="width: 100px; margin-top: 10px; display: none;" type="button">Crop</button> <button hidden class="btn btn-outline-info" id="confirm-btn" style="width: 100%; margin-top: 10px;" type="submit">Post</button>
           
              <div class="col-12">
                <button type="submit" style="width: 200px;" class="btn btn-primary btn-block text-uppercase">Add Product Now</button>
              </div>
            </form>
            </div>
          </div>
        </div>
      </div>
    </div>
</main>


    

    <script src="/assets2/js/main.js"></script>
    <script src="/javascripts/addProductValidation.js"></script>

        <script src="http://code.jquery.com/jquery-1.9.0.js"></script>
<script src="http://code.jquery.com/jquery-migrate-1.0.0.js"></script>
       



<script>
    // image-box is the id of the div element that will store our cropping image preview
    const imagebox0 = document.getElementById('image-box0')
    const imagebox1 = document.getElementById('image-box1')
    const imagebox2 = document.getElementById('image-box2')
    const imagebox3 = document.getElementById('image-box3')

    // crop-btn is the id of button that will trigger the event of change original file with cropped file.
    const crop_btn0 = document.getElementById('crop-btn0')
    const crop_btn1 = document.getElementById('crop-btn1')
    const crop_btn2 = document.getElementById('crop-btn2')
    const crop_btn3 = document.getElementById('crop-btn3')
    // id_image is the id of the input tag where we will upload the image
    const confirm_btn0=document.getElementById('confirm-btn0')
    const confirm_btn1=document.getElementById('confirm-btn1')
    const confirm_btn2=document.getElementById('confirm-btn2')
    const confirm_btn3=document.getElementById('confirm-btn3')

    const input = document.getElementById('id_image')
 
    input.addEventListener('change', () => {
        // Getting image file object from the input variable
        const img_data0 = input.files[0]
        const img_data1 =input.files[1]
        const img_data2 =input.files[2]
        const img_data3 =input.files[3]
        console.log('img_data0+img_data1+img_data2+img_data3')
        console.log(img_data0)
        console.log('img_data0+img_data1+img_data2+img_data3')
        // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
        // The new object URL represents the specified File object or Blob object.
        const url0 = URL.createObjectURL(img_data0)
        const url1 = URL.createObjectURL(img_data1)
        const url2 = URL.createObjectURL(img_data2)
        const url3 = URL.createObjectURL(img_data3)


        // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
        imagebox0.innerHTML = `<img src="${url0}" id="image0" style="width:100%;">`
        imagebox1.innerHTML = `<img src="${url1}" id="image1" style="width:100%;">`
        imagebox2.innerHTML = `<img src="${url2}" id="image2" style="width:100%;">`
        imagebox3.innerHTML = `<img src="${url3}" id="image3" style="width:100%;">`

        // Storing that cropping view image in a variable
        const image0 = document.getElementById('image0')
        const image1 = document.getElementById('image1')
        const image2 = document.getElementById('image2')
        const image3 = document.getElementById('image3')

        // Displaying the image box
        imagebox0.style.display = 'block'
        imagebox1.style.display = 'block'
        imagebox2.style.display = 'block'
        imagebox3.style.display = 'block'
        // Displaying the Crop buttton
        document.getElementById('crop-btn0').style.display = 'block'
        document.getElementById('crop-btn1').style.display = 'block'
        document.getElementById('crop-btn2').style.display = 'block'
        document.getElementById('crop-btn3').style.display = 'block'
        // Hiding the Post button

       
       
        cropper(img_data0,image0,0,crop_btn0,imagebox0,crop_btn0)
        cropper(img_data1,image1,1,crop_btn1,imagebox1,crop_btn1)
        cropper(img_data2,image2,2,crop_btn2,imagebox2,crop_btn2)
        cropper(img_data3,image3,3,crop_btn3,imagebox3,crop_btn3)
    
        // Creating a croper object with the cropping view image
        // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
        // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
        let container = new DataTransfer();
        let fileInputElement = document.getElementById('id_image');
      
        
        
        function cropper(img_data,image,index,crop_btn,imagebox,crop_btn){
            
            const cropper = new Cropper(image, {
            autoCropArea: 1,
            viewMode: 1,
            scalable: false,
            zoomable: false,
            movable: false,
            minCropBoxWidth: 200,
            minCropBoxHeight: 200,
        })
       
        // When crop button is clicked this event will get triggered
        crop_btn.addEventListener('click', () => {
            // This method coverts the selected cropped image on the cropper canvas into a blob object
            cropper.getCroppedCanvas().toBlob((blob) => {

                // Gets the original image data
                
               
                // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                let file= new File([blob], img_data.name, { type: "image/*", lastModified: new Date().getTime() });
                // Create a new container
                
                // Add the cropped image file to the container
                container.items.add(file);
               
                fileInputElement.files=container.files
      
                // Replace the original image file with the new cropped image file
               
                 
                    
               // Hide the cropper box
                imagebox.style.display = 'none'
                // Hide the crop button
                crop_btn.style.display = 'none'

            });
        });
        }
        
        
    });	

    
</script>